
Introduction: 

    Apache is a web server that process http request.
    It is open source.
    Default port is 80. 
    Serves static page.

Apache server alternatives: 
    Nginx 
    Apache Tomcat 

Apache web server vs Tomcat: 
    httpd serve static content. Tomcat is application server to serve java application. 
    
Configuration: 
    httpd   -   centos 
    apache  -   ubuntu 

    /etc/httpd/

    /etc/httpd/conf/httpd.conf      -   global Configuration
    magic                           -   used for determining MIME type basedon firsr few bytes of text.

    /var/www/html                   -   Document Root 

Virtual Host: 

    Can configure to run a multiple website on single server. 

    Types: 
        Name based virtual host. 
            example1.com & example2.com - 10.11.12.13 
        Address based or IP based virtual host.     
            example1.com - 10.11.12.13 , example2.com - 10.11.12.14 
            configure multiple IP address in same server. 

    For virtual host, requires below configuration to process, 
        /etc/httpd/sites-available/your_domain.conf
        /etc/httpd/sites-enabled/your_domain.conf
    
Security: 

    Apache displays version and other server information: 
        vim /etc/httpd/conf/httpd.conf - ServerSignature Off

------------------------------------------------------------------------------------------------------------
LAUNCH SINGLE WEBSITE USING APACHE WEBSERVER 
------------------------------------------------------------------------------------------------------------ 

NOTE: If any change in configuration, reload the httpd service. service httpd configtest to check syntax. 
   
Apache webserver hosts static website using html. Serve dynamic page using php. 

Create Default Page and Backup of Configuration File: 

    Web page is loaded from /var/www/html/index.html folder. When this folder is empty, take the details from /etc/httpd/conf.d/welcome.conf to display the page. 

    Create the index.html file and place under /var/www/html path. 

Add ServerName Directive in Configuration File: 

    ServerName - On which IP address, web server is installed. 
    Incase multiple IP address is assigned to server, apache will listen on all IP address in server. To avoid and instruct apache to listen on specific IP address alone. 

    Example: 
        ServerName  10.11.12.130 

Start Apache Server: 

    sudo systemctl start httpd 
    sudo systemctl restart httpd        -   server stop for a moment. 
    sudo systemctl reload httpd         -   reload the configuration file and not stop server. 
    sudo systemctl stop httpd 
    service httpd configtest            -   to check config syntax. 

Text Based Browsers: 

    elinks, lynx, curl 

    elinks --dump http://10.11.12.120:80  or http://10.11.12.120
    lynx --dump http://10.11.12.120:80  or http://10.11.12.120
    curl http://10.11.12.120:80  or http://10.11.12.120

    port 80 is default web port. If not mention, browser append and send port 80 as default. 

Why we use index.html as default page: 

    DirectoryIndex - It sets the file that Apache will be used to serve web page. 

        <IfModule dir_module>
        DirectoryIndex index.html
        </IfModule>

    Here maintained as index.html , so created with same name under /var/www/html path. 

Default welcome page: 

    If DirectoryIndex file not found, then based on /etc/httpd/conf.d/welcome.conf configuration, load the noindex/index.html page. 

Change Directory Index: 

    Multiple html files can be placed under DirectoryIndex.
    It searches in order and if file found under /var/www/html path , use that. 

        <IfModule dir_module>
        DirectoryIndex index.html i.html j.html 
        </IfModule>

Role of DocumentRoot: 

    DocumentRoot - From which location, search for index.html file. 

    DocumentRoot "/var/www/html"    -   This path can be changed , so new DocumentRoot path can be used.

Change Default Port: 

    Listen Directive - It is used on which port to listen.


------------------------------------------------------------------------------------------------------------
NAME BASED VIRTUAL HOSTING: 
------------------------------------------------------------------------------------------------------------ 

Introduction:

    Multiple websites can be launched using virtual hosting.

Name Based: 
    Multiple sites (example1.com,example2.com) hosted on single IP. 

IP Based: 
    Each website have their own IP address.
    example1.com - 10.11.12.13 , example2.com - 10.11.12.14 

Make changes in Hosts file: 

    DNS Server will be used to configure websites to IP address. Since no DNS server, same logic will be done by using /etc/hosts.

        ::1         localhost6 localhost6.localdomain6
        14.333.15.31 master.example.com master
        14.333.15.31 www.example1.com www
        14.333.15.31 www.example2.com www
        14.333.15.31 www.example3.com www

Create home page for websites: 

    Under /var/www/html , create example1,example2,example3 directory. 
    Under example directory, place the index.html file. 

Edit httpd.conf file: 

    NOTE:   Incase trying in local, use localhost. 
            If IP address used, then first site will be taken as default. 

    NameVirtualHost 10.11.12.13         -   No longer needed in latest apache versions.

        <VirtualHost ip-address>
            Servername site-name
            DocumentRoot folder-path 
        </VirtualHost>

        <VirtualHost 11.12.136.31>
            ServerName www.example1.com
            DocumentRoot /var/www/html/example1
        </VirtualHost>

        <VirtualHost 11.12.136.31>
            ServerName www.example2.com
            DocumentRoot /var/www/html/example2
        </VirtualHost>

        <VirtualHost 11.12.136.31>
            ServerName www.example3.com
            DocumentRoot /var/www/html/example3
        </VirtualHost>

Test Syntax and Reload Apache server: 

    service httpd configtest        -   syntax check.
    systemctl reload httpd          -   reload apache server 

    NOTE: If IP address used, then first site will be taken as default. 

------------------------------------------------------------------------------------------------------------
IP BASED VIRTUAL HOSTING: 
------------------------------------------------------------------------------------------------------------ 

Introduction: 

    Launch multiple websites on multiple ips.

Add additional IP address: 

    Create the ifcfg-eth33 file under the folder /etc/sysconfig/network-scripts/ to update the 3 ip address.
    Restart the network service (systemctl restart network)

    ip a s eth0     -> To check the configuration. 

Modify host file: 

    /etc/hosts file.
    10.11.12.1  www.example1.com www
    10.11.12.2  www.example2.com www
    10.11.12.3  www.example3.com www

Create home page for each site: 

    Under /var/www/html, create 3 directories. 

    /var/www/html/
        example1
            index.html 
        example2
            index.html
        example3
            index.html 

Modify configuration file: 

    Add the below entry in /etc/httpd/conf/httpd.conf file for different ip address. 

        <VirtualHost 10.11.12.1>
            ServerName 10.11.12.1
            DocumentRoot /var/www/html/example1
        </VirtualHost>

        <VirtualHost 10.11.12.2>
            ServerName 10.11.12.2
            DocumentRoot /var/www/html/example2
        </VirtualHost>

        <VirtualHost 10.11.12.3>
            ServerName 10.11.12.3
            DocumentRoot /var/www/html/example3
        </VirtualHost>

Test IP based virtual hosting:

    NOTE: Here able to access by both IP address and website name. 

------------------------------------------------------------------------------------------------------------
HOST BASED SECURITY: 
------------------------------------------------------------------------------------------------------------ 

Introduction: 

    Grant/Deny access based on hostname, ip address, Network, domain. 

        Require 
        RequireAll      -   All condition to be satisfied to give access. 
        RequireAny      -   Any condition to be satisfied to give access. 
        RequireNone     

Case1: 

    Deny access to example1: 

        <Directory /var/www/html/example1>
            Require all denied 
        </Directory>

    Allow from ip 10.11.12.13 but deny from 10.11.12.14: 

        <Directory /var/www/html/example2>
            <RequireAll>
                Require ip 10.11.12.13
                Require not ip 10.11.12.14 
            </RequireAll>
        </Directory>

Case2: 

    Allow only from IP 10.11.12.13:

        <Directory /var/www/html/example1>
            Require ip 10.11.12.13  / Require host host-name
        </Directory>

    Allow access from both ip 10.11.12.15 & 10.11.12.16 
        
        <Directory /var/www/html/example2>
            Require ip 10.11.12.15
            Require ip 10.11.12.16
        </Directory>

    Allow access from NETWORK 10.11.12.15/16 

        <Directory /var/www/html/example3>
            Require ip 10.11   
        </Directory>

Case3: 

    Allow access from everywhere except 10.11.12.18

        <Directory /var/www/html/example>
            <RequireAll>
                Require all granted
                Require not ip 10.11.12.18
            </RequireAll>
        </Directory>

------------------------------------------------------------------------------------------------------------
APACHE USER AUTHENTICATION:
------------------------------------------------------------------------------------------------------------ 

Introduction: 

    Only authenticated users able to view the site. 

Create Apache User: 

    htpasswd -c -m /etc/httpd/webpass user-name 

        -c  -   create new file. If already exixts, overwrite it. Only first time use this. 
        -m  -   use MD5 encryption. 

Edit httpd.conf: 

    <Directory /var/www/html/example1>
        AuthType Basic 
        AuthName "Restricted Access"
        AuthUserFile "/etc/httpd/webpass"
        Require user sheik
    </Directory>

    Auth Type       -   Basic (password will sent in clear text) & Digest
    AuthName        -   Message will be shown during restriction.
    AuthUserFile    -   File where the user authentication details are stored.
    Require user    -   Which users are allowed. 

Verify Authentication: 

    curl www.example1.com -u user-name 

    elinks --dump http://user-name:password@ip-address 

Use .htaccess: 

    Instead of create webpass file, can create .htaccess file under /var/www/html/example1.
    To effect .htaccess file, update "AllowOverride" from None to 'AuthConfig" in httpd.conf file.

    .htaccess content is same as Directory directive. 
                AuthType Basic 
                AuthName "Restricted Access"
                AuthUserFile "/etc/httpd/webpass"
                Require user sheik

    Edit httpd.conf file and place the below content, 

        <Directory /var/www/html/example1>
            AllowOverride AuthConfig
        </Directory>    

Verification: 

    curl www.example1.com -u user-name 

Allow access to all users: 

                AuthType Basic 
                AuthName "Restricted Access"
                AuthUserFile "/etc/httpd/webpass"
                Require valid-user 

    valid-user - all users maintained under webpass is allowed to access. 

Group Based Authentication: 

    Create a group and assign a user to that. Group name is used to control the access. 

    Create a webgroup file, 
        /etc/httpd/webgroup 
            webadmin: sheik
            operator: meeran 
            
    .htaccess file: 
            AuthType Basic
            AuthName "Restricted Access"
            AuthUserFile "/etc/httpd/webpass"
            AuthGroupFile "/etc/httpd/webgroup"
            Require group webadmin

Remove user authentication settings: 

    Remove the .htacess file and Allowoverride in httpd.conf file.

    